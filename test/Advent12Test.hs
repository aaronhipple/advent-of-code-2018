module Advent12Test
  ( test_12
  ) where

import           Advent12
import           Data.Maybe (fromJust)
import           Test.Hspec

sampleInput =
  unlines
    [ "initial state: #..#.#..##......###...###"
    , ""
    , "...## => #"
    , "..#.. => #"
    , ".#... => #"
    , ".#.#. => #"
    , ".#.## => #"
    , ".##.. => #"
    , ".#### => #"
    , "#.#.# => #"
    , "#.### => #"
    , "##.#. => #"
    , "##.## => #"
    , "###.. => #"
    , "###.# => #"
    , "####. => #"
    ]

expectedGenerations =
  [ "...#..#.#..##......###...###..........."
  , "...#...#....#.....#..#..#..#..........."
  , "...##..##...##....#..#..#..##.........."
  , "..#.#...#..#.#....#..#..#...#.........."
  , "...#.#..#...#.#...#..#..##..##........."
  , "....#...##...#.#..#..#...#...#........."
  , "....##.#.#....#...#..##..##..##........"
  , "...#..###.#...##..#...#...#...#........"
  , "...#....##.#.#.#..##..##..##..##......."
  , "...##..#..#####....#...#...#...#......."
  , "..#.#..#...#.##....##..##..##..##......"
  , "...#...##...#.#...#.#...#...#...#......"
  , "...##.#.#....#.#...#.#..##..##..##....."
  , "..#..###.#....#.#...#....#...#...#....."
  , "..#....##.#....#.#..##...##..##..##...."
  , "..##..#..#.#....#....#..#.#...#...#...."
  , ".#.#..#...#.#...##...#...#.#..##..##..."
  , "..#...##...#.#.#.#...##...#....#...#..."
  , "..##.#.#....#####.#.#.#...##...##..##.."
  , ".#..###.#..#.#.#######.#.#.#..#.#...#.."
  , ".#....##....#####...#######....#.#..##."
  ]

(current, spreads) = fromJust $ parsePlants sampleInput

generations = iterate (tick $ spreader spreads) current

test_12 :: IO ()
test_12 = do
  putStrLn $
    unlines $
    map show $ take 21 $ zip3 [0 ..] generations (map score generations)
  hspec $
    describe "score" $
    it "scores gen 20 of example input correctly" $
    score (generations !! 20) == 325
