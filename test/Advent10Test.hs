module Advent10Test
  ( test_10
  ) where

import           Advent10
import           Control.Monad (forM_)
import           Test.Hspec
import           Text.Printf

testInput =
  unlines
    [ "position=< 9,  1> velocity=< 0,  2>"
    , "position=< 7,  0> velocity=<-1,  0>"
    , "position=< 3, -2> velocity=<-1,  1>"
    , "position=< 6, 10> velocity=<-2, -1>"
    , "position=< 2, -4> velocity=< 2,  2>"
    , "position=<-6, 10> velocity=< 2, -2>"
    , "position=< 1,  8> velocity=< 1, -1>"
    , "position=< 1,  7> velocity=< 1,  0>"
    , "position=<-3, 11> velocity=< 1, -2>"
    , "position=< 7,  6> velocity=<-1, -1>"
    , "position=<-2,  3> velocity=< 1,  0>"
    , "position=<-4,  3> velocity=< 2,  0>"
    , "position=<10, -3> velocity=<-1,  1>"
    , "position=< 5, 11> velocity=< 1, -2>"
    , "position=< 4,  7> velocity=< 0, -1>"
    , "position=< 8, -2> velocity=< 0,  1>"
    , "position=<15,  0> velocity=<-2,  0>"
    , "position=< 1,  6> velocity=< 1,  0>"
    , "position=< 8,  9> velocity=< 0, -1>"
    , "position=< 3,  3> velocity=<-1,  1>"
    , "position=< 0,  5> velocity=< 0, -1>"
    , "position=<-2,  2> velocity=< 2,  0>"
    , "position=< 5, -2> velocity=< 1,  2>"
    , "position=< 1,  4> velocity=< 2,  1>"
    , "position=<-2,  7> velocity=< 2, -2>"
    , "position=< 3,  6> velocity=<-1, -1>"
    , "position=< 5,  0> velocity=< 1,  0>"
    , "position=<-6,  0> velocity=< 2,  0>"
    , "position=< 5,  9> velocity=< 1, -2>"
    , "position=<14,  7> velocity=<-2,  0>"
    , "position=<-3,  6> velocity=< 2, -1>"
    ]

testOutputIterations =
  map
    unlines
    [ [ "........#............."
      , "................#....."
      , ".........#.#..#......."
      , "......................"
      , "#..........#.#.......#"
      , "...............#......"
      , "....#................."
      , "..#.#....#............"
      , ".......#.............."
      , "......#..............."
      , "...#...#.#...#........"
      , "....#..#..#.........#."
      , ".......#.............."
      , "...........#..#......."
      , "#...........#........."
      , "...#.......#.........."
      ]
    , [ "......................"
      , "......................"
      , "..........#....#......"
      , "........#.....#......."
      , "..#.........#......#.."
      , "......................"
      , "......#..............."
      , "....##.........#......"
      , "......#.#............."
      , ".....##.##..#........."
      , "........#.#..........."
      , "........#...#.....#..."
      , "..#...........#......."
      , "....#.....#.#........."
      , "......................"
      , "......................"
      ]
    , [ "......................"
      , "......................"
      , "......................"
      , "..............#......."
      , "....#..#...####..#...."
      , "......................"
      , "........#....#........"
      , "......#.#............."
      , ".......#...#.........."
      , ".......#..#..#.#......"
      , "....#....#.#.........."
      , ".....#...#...##.#....."
      , "........#............."
      , "......................"
      , "......................"
      , "......................"
      ]
    , [ "......................"
      , "......................"
      , "......................"
      , "......................"
      , "......#...#..###......"
      , "......#...#...#......."
      , "......#...#...#......."
      , "......#####...#......."
      , "......#...#...#......."
      , "......#...#...#......."
      , "......#...#...#......."
      , "......#...#..###......"
      , "......................"
      , "......................"
      , "......................"
      , "......................"
      ]
    , [ "......................"
      , "......................"
      , "......................"
      , "............#........."
      , "........##...#.#......"
      , "......#.....#..#......"
      , ".....#..##.##.#......."
      , ".......##.#....#......"
      , "...........#....#....."
      , "..............#......."
      , "....#......#...#......"
      , ".....#.....##........."
      , "...............#......"
      , "...............#......"
      , "......................"
      , "......................"
      ]
    ]

test_10 :: IO ()
test_10 = do
  hspec $ do
    describe "parsePoints" $
      it "should parse points" $
      (lines $ show $ parsePoints testInput) `shouldBe`
      (lines $ head testOutputIterations)
    describe "step" $
      forM_ (zip [0 ..] testOutputIterations) $ \(stepNumber, output) ->
        it (printf "should produce good output at step `%d`" stepNumber) $
        (lines $ show $ iterate step (parsePoints testInput) !! stepNumber) `shouldBe`
        (lines output)
